//Задача 2. Исключения в конструкторах
//В этом задании вы запретите создавать экземпляры классов геометрических фигур с неправильными данными.
//
//Создайте собственный класс исключения для ошибки создания геометрической фигуры.Подумайте, от какого 
// типа его унаследовать, и не забудьте поместить новый класс в отдельную пару файлов.
//
//Возьмите иерархию классов из предыдущего задания.Теперь при создании экземпляров классов вам нужно 
// проверять аргументы, которые поступают на вход конструктору.Если аргументы не соответствуют ограничениям, 
// объект не должен быть создан, а на консоль должно быть выведено соответствующее сообщение.Причина ошибки 
// должна быть сформулирована на уровне конструктора и выведена на экран при обработке ошибок.
//
//Ограничения:
//
//треугольник(стороны и углы произвольные, количество сторон равно 3, сумма углов равна 180);
//прямоугольный треугольник(угол C всегда равен 90);
//равнобедренный треугольник(стороны a и c равны, углы A и C равны);
//равносторонний треугольник(все стороны равны, все углы равны 60);
//четырёхугольник(стороны и углы произвольные, количество сторон равно 4, сумма углов равна 360);
//прямоугольник(стороны a, c и b, d попарно равны, все углы равны 90);
//квадрат(все стороны равны, все углы равны 90);
//параллелограмм(стороны a, c и b, d попарно равны, углы A, C и B, D попарно равны);
//ромб(все стороны равны, углы A, C и B, D попарно равны).
//Для проверки попробуйте создать разные геометрические фигуры — правильные и неправильные.В 
// случае успешного создания выводите на экран сообщение об успешном создании и параметры 
// фигуры.В случае, если создание не удалось, выведите причину ошибки.
//
//Пример работы программы
//Консоль
//Прямоугольный треугольник(стороны 3, 4, 5; углы 30, 60, 90) создан
//Ошибка создания фигуры.Причина: сумма углов не равна 180
//Подсказки
//Не читайте этот раздел сразу.Попытайтесь сначала решить задачу самостоятельно : )
//
//Что использовать для решения.
//Класс исключения будет разумно унаследовать от domain_error.
//
//Для предотвращения создания объекта выбрасывайте исключение, если параметры не соответствуют 
// ограничениям.
//
//Не забудьте при создании исключения указать причину ошибки.Для этого вам надо создать в вашем 
// классе исключения конструктор, принимающий строку и передающий её конструктору родителя.
//
//Для создания исключения используйте ключевое слово throw.
//
//Для ожидания исключения используйте ключевое слово try.
//
//Для обработки исключения используйте ключевое слово catch.
//
//
//

#include <iostream>
#include <string>
using namespace std;

#include "Figure.h"
#include "Triangle.h"
#include "Equilateral_triangle.h"
#include "Isosceles_triangle.h"
#include "Rectangular_triangle.h"
#include "Quadrangle.h"
#include "Parallelogram.h"
#include "Rectangl.h"
#include "Square.h"
#include "Rhomb.h"
#include "Exception.h"

// Вывод в консоль
void print_info(Figure* print)
{
	print->print_info();
}

int main()
{
	setlocale(LC_ALL, "Russian");


	try
	{
		/*	Figure figure = {}; */                                      // Фигура
		Triangle triangle = { 10,20,30,50,60,70 };                      // Треугольник
		Rectangular_triangle r_triagle = { 10,20,30,50,60,90 };         // Прямоугольный треугольник
		Isosceles_triangle i_triagle = { 10,20,10,60,20,60 };           // Равнобедренный треугольник
		Equilateral_triangle e_triagle = { 20,20,20,60,60,60 };         // Равносторонний треугольник

		Quadrangle quadrangle = { 10,20,30,40,90,90,90,90 };            // Четырехугольник
		Rectangl rectangle = { 10,10,10,10,90,90,90,90 };               // Прямоугольник
		Square square = { 20,20,20,20,90,90,90,90 };                    // Квадрат
		Parallelogram parallelogram = { 20,30,30,40,90,90,90,90 };      // Параллелограмм
		Rhomb rhomb = { 30,30,40,40,90,90,90,90 };                      // Ромб


		/*Figure* p_figure = &figure;*/
		Figure* p_triangle = &triangle;                                 // Треугольник
		Figure* p_rectangular_triangle = &r_triagle;                    // Прямоугольный треугольник
		Figure* p_isosceles_triangle = &i_triagle;                      // Равнобедренный треугольник
		Figure* p_equilateral_triangle = &e_triagle;                    // Равносторонний треугольник

		Figure* p_quadrangle = &quadrangle;                             // Четырехугольник
		Figure* p_rectangle = &rectangle;                               // Прямоугольник
		Figure* p_square = &square;                                     // Квадрат
		Figure* p_parallelogram = &parallelogram;                       // Параллелограмм
		Figure* p_rhomb = &rhomb;                                       // Ромб


		// Вывод
		//print_info(p_figure);
		print_info(p_triangle);                                         // Треугольник
		print_info(p_rectangular_triangle);                             // Прямоугольный треугольник
		print_info(p_isosceles_triangle);                               // Равнобедренный треугольник
		print_info(p_equilateral_triangle);                             // Равносторонний треугольник

		print_info(p_quadrangle);                                       // Четырехугольник
		print_info(p_rectangle);                                        // Прямоугольник
		print_info(p_square);                                           // Квадрат
		print_info(p_parallelogram);                                    // Параллелограмм
		print_info(p_rhomb);                                            // Ромб
	}

	catch (const Exception& ex)
	{
		cout << ex.what() << "\n";
	}

	return 0;
}